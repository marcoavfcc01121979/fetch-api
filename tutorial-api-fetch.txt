nesse inicio vamos criar um array para carregar os dados automaticos
dentro de clientes.js.

const informacoesCliente = [
  {
    cpf: '12345678901',
    nome: 'Marco'
  }
]

vamos colocar esses dados dentro da tabela no html.
modelo manual

const informacoesCliente = [
  {
    cpf: '12345678901',
    nome: 'Marco'
  }
]

const conteudoLinha = `
  <tr>
    <td>${informacoesCliente[0].cpf}</td>
    <td>${informacoesCliente[0].nome}</td>
  </tr>
`

const corpoTabela = document.querySelector("[data-conteudo-tabela]")

corpoTabela.innerHTML = conteudoLinha;


vamos colocar esses dados dentro da tabela no html usando o 
forEach ou seja trabalhando com multiplos cliente.

agora nesse momento vamos consumir os dados da api do pet-shop 
vamos apagar o array que estavamos usando.

vamos ultilizar o fetch
fetch('http://localhost:4000/clientes')

se termos um console.log podemos ver que recebemos uma promisse
agora podemos atraves do then ultilizar resolve trabalhar no resolve
fetch('http://localhost:4000/clientes')
  .then( resposta => {
    console.log(resposta.json())
  })

agora vamos fazer o then transformar a resposta em um json.
fetch('http://localhost:4000/clientes')
  .then( resposta => {
    return resposta.json()
  })
  .then( json => {
    console.log(json) 
  })

vamos criar uma pasta chamada api e depois vou criar um arquivo chamado
cliente.js para que toda comunicação seja feita dentro dessa pasta.
fetch('http://localhost:4000/clientes')
  .then( resposta => {
    return resposta.json()
  })
  .then( json => {
    console.log(json) 
  })

agora preciso importar o arquivo cliente.js dentro da pasta html.

agora dentro de cliente.js vou criar uma funcao capaz de exibir os dados 
api dentro do html.

listarClientes = () => {
  return fetch('http://localhost:4000/clientes')
  .then( resposta => {
    return resposta.json()
  })
  .then( json => {
    return json 
  })
}

agora vou para o arquivo listagemCliente.js o arquivo estava dessa forma

//console.log(fetch('http://localhost:4000/clientes'));
const corpoTabela = document.querySelector("[data-conteudo-tabela]")

const exibeCliente = (cpf, nome) => {
  const linha = document.createElement('tr');

  const conteudoLinha = `
      <td>${cpf}</td>
      <td>${nome}</td>
  `
  linha.innerHTML = conteudoLinha;
  return linha;
}
/*
informacoesCliente.forEach(indice => {
  corpoTabela.appendChild(exibeCliente(indice.cpf, indice.nome))
})*/

O arquivo de listagemCliente atualizado ficou assim

//console.log(fetch('http://localhost:4000/clientes'));
const corpoTabela = document.querySelector("[data-conteudo-tabela]")

const exibeCliente = (cpf, nome) => {
  const linha = document.createElement('tr');

  const conteudoLinha = `
      <td>${cpf}</td>
      <td>${nome}</td>
  `
  linha.innerHTML = conteudoLinha;
  return linha;
}
/*
listarClientes().then(exibe => {
  exibe.forEach(indice => {
    corpoTabela.appendChild(exibeCliente(indice.cpf, indice.nome))
  })
})*/

dentro do html o script da api tem que vim primeiro.

agora dentro de api/cliente vou criar o metodo cadastrarCliente

const cadastrarClientes = (nome, cpf) => {
  const Json = JSON.stringify({
    nome: nome,
    cpf: cpf
  })
  return fetch('http://localhost:4000/clientes/clientes', {
    method: 'POST',
    headers: {
      'Content-type': 'application/json'
    },
    body: Json
  })
  .then(res => {
    return res.body
  })
    
}

agora vou criar um arquivo javascript cadastro-cliente.js que cria um evento para pegar os dados 
do formulario para q possa ser cadastrado no banco de dados.

 const formCadastroCliente = document.querySelector('[data-form]')
//console.log(formCadastroCliente)


formCadastroCliente.addEventListener("submit", event => {
  event.preventDefault()

  const nome = event.target.querySelector('[data-nome]')
  const cpf = event.target.querySelector('[data-cpf]')

  cadastrarClientes(nome.value, cpf.value); 
})


agora vamos criar um arquivo que faz a validação do cpf
validaCpf.js

const verificaCpfInvalido = (cpf) => {
  const cpfsInvalido = [
    '11111111111',
    '22222222222',
    '33333333333',
    '44444444444',
    '55555555555',
    '66666666666',
    '77777777777',
    '88888888888',
    '99999999999',
    '00000000000'
  ]
  return cpfsInvalido.indexOf(cpf) === -1
}

const somaNumerosCpf = (cpf, totalDeDigitos, peso) => {
  let soma = 0
  for(let i = 1; i <= totalDeDigitos; i++) {
    soma += parseInt(cpf.substring(i - 1, i)) * ( peso - i )   
  }
  return soma;
}

const verificaDigito = (cpf, totalDeDigitos, peso, digitoDeVerificacao) => {
  const soma = somaNumerosCpf(cpf, totalDeDigitos, peso)
  const resto = (soma * 10) % 11
  return resto === digitoDeVerificacao
}

const verificaPrimeiroDigito = (cpf) => {
  const peso = 11
  const totalDeDigitosPrimeiraParte = 9
  const digitoDeVerificacao = parseInt(cpf.substring(9, 10))

  return verificaDigito(
    cpf,
    totalDeDigitosPrimeiraParte,
    peso,
    digitoDeVerificacao
  )
}

const verificaSegundoDigito = (cpf) => {
  const peso = 12
  const totalDeDigitosSegundaParte = 10
  const digitoDeVerificacao = parseInt(cpf.substring(10, 11))

  return verificaDigito(
    cpf,
    totalDeDigitosSegundaParte,
    peso,
    digitoDeVerificacao
  )
}

const validaCPF = (cpf) => {
  return(
    verificaPrimeiroDigito(cpf)&&
    verificaSegundoDigito(cpf)&&
    verificaCpfInvalido(cpf)
  )
}

agora no cadastro-clientes.js vamos fazer a verificação
